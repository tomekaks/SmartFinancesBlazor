@page "/transfers/contactbook"
@inject IContactsService ContactsService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Saved Contacts</PageTitle>

@if (isLoading)
{
    <_LoadingData Message="Loading contacts..."></_LoadingData>
}
else
{
    <div class="container mt-2">
        <div class="row mb-2">
            <div class="col-10">
                <MudDataGrid T="ContactVM" Items="Contacts" ReadOnly="true" Bordered="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h4">Contacts</MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="q => q.Name"></PropertyColumn>
                        <PropertyColumn Property="q => q.AccountNumber" Title="Account Number"></PropertyColumn>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="() => ConfirmUseContact(context.Item)">Use</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </div>
        </div>
        <div class="row">
            <div class="d-flex flex-wrap mt-4">
                <MudButton Variant="Variant.Filled" Color="@Color.Primary" OnClick="NavigateToNewTransfer">Back</MudButton>
            </div>
        </div>
    </div>

}


@code {
    private List<ContactVM> Contacts = new();
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Contacts = await ContactsService.GetContactsAsync();
        isLoading = false;
    }

    private async Task ConfirmUseContact(ContactVM contact)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to use this contact?");
        parameters.Add(x => x.ButtonText, "Use");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            UseContact(contact);
        }
    }

    private void UseContact(ContactVM contactVM)
    {
        NavigationManager.NavigateTo($"/transfers/newtransfer/{contactVM.Name}/{contactVM.AccountNumber}");
    }

    private void NavigateToNewTransfer()
    {
        NavigationManager.NavigateTo("/transfers/newtransfer");
    }
}
