@page "/transfers/contactbook"
@inject IContactsService _contactsService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService

<PageTitle>Saved Contacts</PageTitle>

@if (isLoading)
{
    <_LoadingData Message="Loading contacts..."></_LoadingData>
}
else
{
    <div class="container mt-5">
        <div class="row mb-2 justify-content-center">
            <div class="col-8">
                <div class="card shadow">
                    <div class="card-header d-flex justify-content-center">
                        <h2>Contacts</h2>
                    </div>
                    <div class="card-body">
                        <MudDataGrid T="ContactVM" Items="Model" ReadOnly="false" Bordered="true" Dense="true">
                            <Columns>
                                <PropertyColumn Property="q => q.Name"></PropertyColumn>
                                <PropertyColumn Property="q => q.AccountNumber" Title="Account Number"></PropertyColumn>
                                <TemplateColumn>
                                    <CellTemplate>
                                        <MudButton 
                                            Variant="Variant.Filled" 
                                            Color="Color.Success" 
                                            Size="Size.Small"
                                            OnClick="() => ConfirmUseContact(context.Item)">
                                            Use
                                        </MudButton>
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </div>
                </div>

            </div>
        </div>
    </div>

}


@code {
    private List<ContactVM> Model = new();
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Model = await _contactsService.GetContactsAsync();
        isLoading = false;
    }

    private async Task ConfirmUseContact(ContactVM contact)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to use this contact?");
        parameters.Add(x => x.ButtonText, "Use");
        parameters.Add(x => x.Color, Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = _dialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            UseContact(contact);
        }
    }

    private void UseContact(ContactVM contactVM)
    {
        _navigationManager.NavigateTo($"/transfers/newtransfer/{contactVM.Name}/{contactVM.AccountNumber}");
    }

    private void NavigateToNewTransfer()
    {
        _navigationManager.NavigateTo("/transfers/newtransfer");
    }
}
