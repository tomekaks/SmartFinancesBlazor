@page "/transfers"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject ITransfersService TransfersService
@inject NavigationManager NavigationManager


@if(Model.GroupedTransfers is null)
{
    <_LoadingData Message="Loading transfers..."></_LoadingData>
}
else
{
    <div class="container mt-4">
        <div class="row mb-5 justify-content-center">
            <div class="col-8">
                <_CurrentAccountCard CurrentAccount="@Model.CurrentAccount" />
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-8">
                <_TransferList 
                    GroupedTransfers="@Model.GroupedTransfers" 
                    CurrentPage="@Model.CurrentPage"
                    TotalPages="@Model.TotalPages"
                    OnPageChange="ReloadDataAsync">
                </_TransferList>
            </div>
        </div>
    </div>
}


@code {
    private TransfersOverviewVM Model = new();
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Model = await TransfersService.GenerateTransfersOverviewVM();
        isLoading = false;
    }

    private async Task ReloadDataAsync(int pageNumber)
    {
        Model = await TransfersService.GenerateTransfersOverviewVM(pageNumber);
    }

    private void NavigateToNewTransfer()
    {
        NavigationManager.NavigateTo("/transfers/newtransfer");
    }
}
