@page "/transfers/deposit"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject NavigationManager _navManager
@inject ITransfersService _transfersService
@inject IAccountsService _accountsService
@inject IDialogService _mudDialogService

<PageTitle>Deposit</PageTitle>

@if(isLoading)
{
    <_LoadingData></_LoadingData>
}
else
{
    <div class="container">
        <div class="row mb-3 mt-2 d-flex justify-content-center">
            <div class="col-3">
                <div class="card shadow">
                    <div class="card-header text-center">
                        <h6 class="mb-0">Current account</h6>
                    </div>
                    <div class="card-body">
                        <MudText>@Model.TransactionalAccount.Name</MudText>
                        <MudText>@Model.TransactionalAccount.Number</MudText>
                        <MudText>Balance: @Model.TransactionalAccount.Balance</MudText>
                    </div>
                </div>
            </div>
            <div class="col-3">
                <div class="card shadow">
                    <div class="card-header text-center">
                        <h6 class="mb-0">Savings account</h6>
                    </div>
                    <div class="card-body">
                        <MudText>@Model.SavingsAccount.Name</MudText>
                        <MudText>@Model.SavingsAccount.Number</MudText>
                        <MudText>Balance: @Model.SavingsAccount.Balance</MudText>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-6">
                <EditForm Model="@Model" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <div class="card shadow">
                        <div class="card-header mb-2">
                            <div class="text-center">
                                <h3>Deposit</h3>
                            </div>
                        </div>
                        <div class="card-body mb-2">
                            <MudTextField Label="Amount" @bind-Value="Model.Amount" For="@(() => Model.Amount)" />
                        </div>
                        <div class="card-footer d-flex justify-content-between">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToTransfers">Back</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Deposit</MudButton>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    public DepositVM Model { get; set; } = new();
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadModel();
    }

    private async Task LoadModel()
    {
        isLoading = true;
        Model.TransactionalAccount = await _accountsService.GetCurrentAccountAsync();
        Model.SavingsAccount = await _accountsService.GetUsersSavingsAccountAsync();
        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        if(Model.Amount > Model.TransactionalAccount.Balance)
        {
            OpenDialog();
            return;
        }

        bool response = await _transfersService.DepositOnSavingsAccountAsync(Model.Amount);
        if (response)
        {
            NavigateToTransfers();
        }
    }

    private void OpenDialog()
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ButtonText, "Ok");
        parameters.Add(x => x.Color, Color.Primary);

        _mudDialogService.Show<Dialog>("Insufficient funds", parameters);
    }

    private void NavigateToTransfers()
    {
        _navManager.NavigateTo("/savingstransfers");
    }
}
