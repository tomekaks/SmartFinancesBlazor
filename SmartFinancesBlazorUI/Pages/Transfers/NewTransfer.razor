@page "/transfers/newtransfer"
@page "/transfers/newtransfer/{Name}/{AccountNumber}"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject NavigationManager _navigationManager
@inject ITransfersService _transfersService
@inject IAccountsService _accountsService
@inject IContactsService _contactsService
@inject IDialogService _mudDialogService

<PageTitle>New Transfer</PageTitle>

@if(isLoading)
{
    <_LoadingData></_LoadingData>
}
else
{
    <div class="row mb-3 mt-2 justify-content-center">
        <div class="col-5">
            <_CurrentAccountCard CurrentAccount="@Model.CurrentAccountVM" />
        </div>
    </div>

    <EditForm Model="@Model" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="container mt-5">
            <div class="row d-flex justify-content-center">
                <div class="col-5">
                    <div class="card shadow">
                        <div class="card-header">
                            <MudText Class="text-center" Typo="Typo.h4">New Transfer</MudText>
                        </div>
                        <div class="card-body mb-2">
                            <MudTextField Label="Receiver name"
                                          @bind-Value="Model.ReceiverName" For="@(() => Model.ReceiverName)"
                                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Contacts"
                                          OnAdornmentClick="NavigateToContacts"
                                          Disabled="@(!string.IsNullOrEmpty(Name))" />
                            <MudTextField Label="Receiver account number" Class="mt-3"
                                          @bind-Value="Model.ReceiverAccountNumber" For="@(() => Model.ReceiverAccountNumber)"
                                          Disabled="@(!string.IsNullOrEmpty(AccountNumber))" />
                            <MudTextField Label="Amount" Class="mt-3"
                                          @bind-Value="Model.Amount" For="@(() => Model.Amount)" />
                            <MudTextField Label="Title" Class="mt-3"
                                          @bind-Value="Model.Title" For="@(() => Model.Title)" />
                            <MudCheckBox @bind-Value="addToContacts" Label="Add to Contacts"></MudCheckBox>
                        </div>
                        <div class="card-footer d-flex justify-content-between">
                            <MudButton 
                                Variant="Variant.Filled" 
                                Color="Color.Primary" 
                                Class="me-0" 
                                OnClick="NavigateToTransfers">
                                Back
                            </MudButton>
                            <MudButton 
                                ButtonType="ButtonType.Submit" 
                                Variant="Variant.Filled"
                                EndIcon="@Icons.Material.Filled.Send"
                                Class="ml-auto" 
                                Color="Color.Success">
                                Send
                            </MudButton>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public string AccountNumber { get; set; } = string.Empty;

    private NewTransferVM Model = new NewTransferVM();
    private bool isLoading = false;
    private bool addToContacts;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        Model.ReceiverName = Name;
        Model.ReceiverAccountNumber = AccountNumber;
        Model.CurrentAccountVM = await _accountsService.GetCurrentAccountAsync();
        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        if(Model.Amount > Model.CurrentAccountVM.Balance)
        {
            OpenDialog("Insufficient funds.");
            return;
        }

        bool accountExists = await _accountsService.CheckIfTransactionalAccountExistsAsync(Model.ReceiverAccountNumber);
        if (!accountExists)
        {
            OpenDialog("Account with this number does not exist.");
            return;
        }

        await _transfersService.CreateTransferAsync(Model);

        if(addToContacts)
        {
            await HandleAddingContact();
        }

        NavigateToTransfers();
    }

    private async Task HandleAddingContact()
    {
        bool contactExists = await _contactsService.CheckIfContactExistsAsync(Model.ReceiverName, Model.ReceiverAccountNumber);
        if (contactExists)
        {
            string message = "Contact with this name or account number already exists.";
            OpenDialog(message);
            return;
        }
        await _contactsService.CreateContactAsync(Model.ReceiverName, Model.ReceiverAccountNumber);
    }

    private void OpenDialog(string message)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ButtonText, "Ok");
        parameters.Add(x => x.Color, Color.Primary);

        _mudDialogService.Show<Dialog>(message, parameters);
    }

    private void NavigateToContacts()
    {
        _navigationManager.NavigateTo("/transfers/contactbook");
    }

    private void NavigateToTransfers()
    {
        _navigationManager.NavigateTo("/transfers");
    }
}

