@page "/transfers/newtransfer"
@page "/transfers/newtransfer/{Name}/{AccountNumber}"
@inject NavigationManager NavigationManager
@inject ITransfersService TransferService
@inject IDialogService MudDialogService

<PageTitle>New Transfer</PageTitle>

@if(Model.CurrentAccountVM == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row mb-3 mt-2 justify-content-center">
        <div class="col-5">
@*             <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Current account</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Account name: @Model.CurrentAccountVM.Name</MudText>
                    <MudText>Account number: @Model.CurrentAccountVM.Number</MudText>
                    <MudText>Balance: @Model.CurrentAccountVM.Balance</MudText>
                </MudCardContent>
            </MudCard> *@
            <_CurrentAccountCard CurrentAccount="@Model.CurrentAccountVM" />
        </div>
    </div>
}

<EditForm Model="@Model" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="5">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">New Transfer</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="NavigateToContacts">Contacts</MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Receiver name"
                                  @bind-Value="Model.ReceiverName" For="@(() => Model.ReceiverName)" />
                    <MudTextField Label="Receiver account number" Class="mt-3"
                                  @bind-Value="Model.ReceiverAccountNumber" For="@(() => Model.ReceiverAccountNumber)" />
                    <MudTextField Label="Amount" Class="mt-3"
                                  @bind-Value="Model.Amount" For="@(() => Model.Amount)" />
                    <MudTextField Label="Title" Class="mt-3"
                                  @bind-Value="Model.Title" For="@(() => Model.Title)" />
                    <MudCheckBox @bind-Value="addToContacts" Label="Add to Contacts"></MudCheckBox>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="me-0" OnClick="NavigateToTransfers">Back</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="ml-auto" Color="Color.Success">Send</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public string AccountNumber { get; set; } = string.Empty;

    private NewTransferVM Model = new NewTransferVM();
    private bool addToContacts;

    protected override async Task OnInitializedAsync()
    {
        Model.ReceiverName = Name;
        Model.ReceiverAccountNumber = AccountNumber;
        Model.CurrentAccountVM = await TransferService.GetCurrentAccountAsync();
    }

    private void NavigateToContacts()
    {
        NavigationManager.NavigateTo("/transfers/contactbook");
    }

    private void NavigateToTransfers()
    {
        NavigationManager.NavigateTo("/transfers");
    }

    private async Task HandleSubmit()
    {
        if(Model.Amount > Model.CurrentAccountVM.Balance)
        {
            OpenDialog("Insufficient funds.");
            return;
        }

        bool accountExists = await TransferService.CreateTransferAsync(Model);
        if (!accountExists)
        {
            OpenDialog("Account with this number does not exist.");
            return;
        }

        if(addToContacts)
        {
            bool contactAdded =  await TransferService.AddToContactsAsync(Model);
            if(!contactAdded)
            {
                string message = "Contact with this name or account number already exists.";
                OpenDialog(message);
            }
        }

        NavigateToTransfers();
    }

    private void OpenDialog(string message)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ButtonText, "Ok");
        parameters.Add(x => x.Color, Color.Primary);

        MudDialogService.Show<Dialog>(message, parameters);
    }
}

