@page "/authentication/register"
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

<PageTitle>Registration</PageTitle>

@if(Messages.Any())
{
    foreach(var message in Messages)
    {
        <div class="alert alert-danger">@message</div>   
    }
}

<div class="d-flex justify-content-center align-items-center mt-5">
    <MudPaper Elevation="4" Class="p-4" Style="max-width: 500px; width: 100%;">
        <EditForm Model="@Model" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudCard Class="shadow-none" Style="border: none;">
                        <MudCardHeader Class="text-center">
                            <MudText Typo="Typo.h4" Class="mx-auto">Register</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudTextField Label="User name"
                                          @bind-Value="Model.UserName"
                                          For="@(() => Model.UserName)"
                                          FullWidth="true"
                                          Class="mb-3" />
                            <MudTextField Label="Email"
                                          @bind-Value="Model.Email"
                                          For="@(() => Model.Email)"
                                          FullWidth="true"
                                          Class="mb-3" />
                            <MudTextField Label="Password"
                                          HelperText="Choose a strong password"
                                          @bind-Value="Model.Password"
                                          For="@(() => Model.Password)"
                                          InputType="InputType.Password"
                                          FullWidth="true"
                                          Class="mb-3" />
                            <MudTextField Label="Confirm Password"
                                          HelperText="Repeat the password"
                                          @bind-Value="Model.ConfirmPassword"
                                          For="@(() => Model.ConfirmPassword)"
                                          InputType="InputType.Password"
                                          FullWidth="true" />
                        </MudCardContent>
                        <MudCardActions Class="justify-content-center">
                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Disabled=@(isProcessing ? true : false)
                                       Color="Color.Primary"
                                       Class="mt-3" Style="width: 100%;">Register</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</div>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <MudAlert Class="mb-3" Severity="Severity.Info" Elevation="3" Variant="Variant.Filled">
                <strong>Please Note:</strong><br />

                This application is hosted on a free-tier Azure server, which may cause the database and API to take a few seconds to initialize after periods of inactivity.
                As a result, you might occasionally encounter an error. If this happens, please refresh the page to continue using the application.
            </MudAlert>
        </div>
    </div>
</div>


@code {
    public RegisterVM Model { get; set; } = new();
    public List<string> Messages { get; set; } = new();
    private bool isProcessing = false;

    private async Task HandleSubmit()
    {
        isProcessing = true;
        var registrationResult = await AuthenticationService.RegisterAsync(Model);

        if (registrationResult.Succeeded)
        {
            NavigationManager.NavigateTo("authentication/login");
            return;
        }

        Messages = registrationResult.Errors.ToList();
        isProcessing = false;
    }
}
