@page "/admin/accountrequests"
@attribute [Authorize (Roles = Constants.ADMINISTRATOR)]
@inject IAdminService _adminService

<PageTitle>Account requests</PageTitle>

@if(isLoading)
{
    <_LoadingData Message="Loading requests..."></_LoadingData>
}
else
{
    <div class="container mt-4">
        <div class="row mb-2 d-flex justify-content-center">
            <div class="col-10">
                <div class="card shadow">
                    <div class="card-header d-flex justify-content-center">
                        <h1>Account requests</h1>
                    </div>
                    <div class="card-body">
                        <div class="mb-2 d-flex justify-content-center">
                            <MudButtonGroup OverrideStyles="false">
                                <MudButton Variant="Variant.Outlined" Color="@Color.Warning"
                                    OnClick="@(() => ChangeStatus("Pending"))">Pending</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Success"
                                    OnClick="@(() => ChangeStatus("Approved"))">Approved</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Error"
                                    OnClick="@(() => ChangeStatus("Rejected"))">Rejected</MudButton>
                                <MudButton Variant="Variant.Outlined"
                                    OnClick="GetAllRequests">All</MudButton>
                            </MudButtonGroup>
                        </div>
                        <div class="mb-2">
                            <MudDataGrid T="AccountRequestVM" Items="Requests" ReadOnly="false" Bordered="true">
                                <Columns>
                                    <PropertyColumn Property="q => q.UserName" Title="User"></PropertyColumn>
                                    <PropertyColumn Property="q => q.Type" Title="Account type"></PropertyColumn>
                                    <PropertyColumn Property="q => q.Status"></PropertyColumn>
                                    <PropertyColumn Property="q => q.DateRequested" Title="Date requested"></PropertyColumn>
                                    <TemplateColumn>
                                        <CellTemplate>
                                            @if(context.Item.Status == "Pending")
                                            {
                                                <MudButton Variant="Variant.Filled"
                                                           Color="Color.Success"
                                                           Size="Size.Small"
                                                           EndIcon="@Icons.Material.Filled.Send"
                                                           OnClick="() => ApproveAccountRequest(context.Item.Id)">
                                                    Approve
                                                </MudButton>
                                                <MudButton Variant="Variant.Filled"
                                                           Color="Color.Error"
                                                           Size="Size.Small"
                                                           StartIcon="@Icons.Material.Filled.Delete"
                                                           OnClick="() => RejectAccountRequest(context.Item.Id)">
                                                    Reject
                                                </MudButton>
                                            }
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                            </MudDataGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public List<AccountRequestVM> Requests { get; set; } = new();
    bool isLoading = false;
    private string _status = "Pending";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Model.Requests = await AdminService.GetPendingAccountRequestsAsync();
        isLoading = true;
        Requests = await _adminService.GetAccountRequestsByStatusAsync(_status);
        isLoading = false;
    }

    private async Task ApproveAccountRequest(int accountRequestId)
    {
        await _adminService.ApproveAccountRequestAsync(accountRequestId);
        await LoadData();
    }

    private async Task RejectAccountRequest(int accountRequestId)
    {
        await _adminService.RejectAccountRequestAsync(accountRequestId);
        await LoadData();
    }

    private async Task ChangeStatus(string status)
    {
        _status = status;
        await LoadData();
    }

    private async Task GetAllRequests()
    {
        _status = "All";
        Requests = await _adminService.GetAllAccountRequestsAsync();
    }
}
