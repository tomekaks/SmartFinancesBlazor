@page "/budgetplanner"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject IBudgetPlannerService BudgetPlannerService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Budget planner</PageTitle>


@if(Model == null)
{
    <p>Loading data...</p>
}
else if(Model.YearlySummary == null)
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.body2">Click the button if you want to start a new summary.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick= "StartNewYearlySummary">New summary</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    <div class="container mt-4">
        <div class="row mb-2 justify-content-center">
            <div class="col-9">
                <_SummaryNavigation CurrentMonthlySummary="@Model.CurrentMonthlySummary" OnNextMonthClick="NextMonth" OnPreviousMonthClick="PreviousMonth" />
            </div>
        </div>
        <div class="row mb-5 d-flex justify-content-center align-items-stretch">
            <div class="col-3 d-flex">
                <_BudgetCard MonthlyBudget="@Model.CurrentMonthlySummary.Budget" OnConfirmBudget="ConfirmBudget" />
            </div>
            <div class="col-3 d-flex">
                <_SingleValueCard Title="Expenses" Value="@Model.TotalAmount"></_SingleValueCard>
            </div>
            <div class="col-3 d-flex">
                <_SingleValueCard Title="Saved" Value="@Model.Saved"></_SingleValueCard>
            </div>
        </div>
        <div class="row mb-5 justify-content-center">
            <div class="col-9">
                <div class="card shadow">
                    <div class="card-header">
                        <h2 class="text-center">Expenses</h2>
                    </div>
                    <div class="card-body">
                        <_ExpensesDataGrid Expenses="Model.CurrentMonthlySummary.Expenses" OnExpenseDelete="LoadModel"></_ExpensesDataGrid>
                    </div>
                </div>
                  
            </div>          
        </div>
    </div>  
}

@code {
    private PlannerVM Model;

    protected override async Task OnInitializedAsync()
    {
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task LoadModel()
    {
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task StartNewYearlySummary()
    {
        await BudgetPlannerService.StartNewYearlySummary();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task PreviousMonth()
    {
        BudgetPlannerService.MoveMonthBack();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task NextMonth()
    {
        BudgetPlannerService.MoveMonthForward();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task ConfirmBudget(decimal newBudget)
    {
        await LoadModel();
    }
}

