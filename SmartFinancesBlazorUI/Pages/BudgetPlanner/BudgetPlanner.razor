@page "/budgetplanner"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject IBudgetPlannerService BudgetPlannerService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Budget planner</PageTitle>


@if(Model == null)
{
    <p>Loading data...</p>
}
else if(Model.YearlySummary == null)
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.body2">Click the button if you want to start a new summary.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick= "StartNewYearlySummary">New summary</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    <div class="container mt-4">
        <div class="row mb-2 justify-content-center">
            <div class="col-9">
                <_SummaryNavigation CurrentMonthlySummary="@Model.CurrentMonthlySummary" OnNextMonthClick="NextMonth" OnPreviousMonthClick="PreviousMonth" />
            </div>
        </div>
        <div class="row mb-5 d-flex justify-content-center align-items-stretch">
            <div class="col-3 d-flex">
                <_BudgetCard MonthlyBudget="@Model.CurrentMonthlySummary.Budget" OnConfirmBudget="ConfirmBudget" />
            </div>
            <div class="col-3 d-flex">
                <_SingleValueCard Title="Expenses" Value="@Model.TotalAmount"></_SingleValueCard>
            </div>
            <div class="col-3 d-flex">
                <_SingleValueCard Title="Saved" Value="@Model.Saved"></_SingleValueCard>
            </div>
        </div>
        <div class="row mb-5 justify-content-center">
            <div class="col-9">
                <MudDataGrid T="ExpenseVM" Items="Model.CurrentMonthlySummary.Expenses" ReadOnly="false" EditMode="DataGridEditMode.Form"
                    Bordered="true" Groupable="true" GroupExpanded="true" StartedEditingItem="@StartedEditingItem" CommittedItemChanges="CommittedItemChanges">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Expenses</MudText>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="NavigateToAddExpense">Add expense</MudButton> 
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="NavigateToRegularExpenses">Regular expenses</MudButton>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="q => q.Name" Groupable="false"></PropertyColumn>
                        <PropertyColumn Property="q => q.Amount" Groupable="false"></PropertyColumn>
                        <PropertyColumn Property="q => q.ExpenseTypeVM.Name" Title="Type" Grouping>
                            <EditTemplate>
                                    <MudSelect @bind-Value="@context.Item.ExpenseTypeVM" RequiredError="Please select Expense Type." 
                                        Placeholder="@context.Item.ExpenseTypeVM.Name">
                                        <MudSelectItem Value="@context.Item.ExpenseTypeVM">@context.Item.ExpenseTypeVM.Name</MudSelectItem>
                                    @foreach(var expType in Model.ExpenseTypes)
                                    {
                                        <MudSelectItem Value="expType">@expType.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </EditTemplate>
                            <GroupTemplate>
                                <span style="font-weight:bold">
                                    Type: @context.Grouping.Key 
                                    <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">total @context.Grouping.Sum(q => q.Amount)</MudChip>
                                </span>
                            </GroupTemplate>
                        </PropertyColumn>
                        <TemplateColumn Grouping="false">
                            <CellTemplate>
                                <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" OnClick="@context.Actions.StartEditingItemAsync">Edit</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => ConfirmDeleteExpense(context.Item.Id)">Delete</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>                   
            </div>          
        </div>
    </div>  
}

@code {
    private PlannerVM? Model;

    protected override async Task OnInitializedAsync()
    {
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task LoadModel()
    {
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task StartNewYearlySummary()
    {
        await BudgetPlannerService.StartNewYearlySummary();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task StartedEditingItem()
    {
        Model.ExpenseTypes = await BudgetPlannerService.GetExpenseTypesAsync();
    }

    private async Task CommittedItemChanges(ExpenseVM expenseVM)
    {
        await BudgetPlannerService.EditExpenseAsync(expenseVM);
    }

    private async Task ConfirmDeleteExpense(int id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this expense?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteExpense(id);
        }
    }

    private async Task DeleteExpense(int id)
    {
        await BudgetPlannerService.DeleteExpenseAsync(id);
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task PreviousMonth()
    {
        BudgetPlannerService.MoveMonthBack();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task NextMonth()
    {
        BudgetPlannerService.MoveMonthForward();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task ConfirmBudget(decimal newBudget)
    {
        await LoadModel();
    }

    private void NavigateToAddExpense()
    {
        NavigationManager.NavigateTo("/budgetplanner/addexpense");
    }

    private void NavigateToRegularExpenses()
    {
        NavigationManager.NavigateTo("/budgetplanner/regularexpenses");
    }

    private void NavigateToEditExpense(int id)
    {
        NavigationManager.NavigateTo($"/budgetplanner/editexpense/{id}");
    }
}

