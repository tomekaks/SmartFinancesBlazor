@page "/budgetplanner"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject IBudgetPlannerService _budgetPlannerService
@inject IAccountsService _accountsService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService

<PageTitle>Budget planner</PageTitle>


@if(isLoading)
{
    <_LoadingData Message ="Loading budget planner..."></_LoadingData>
}
else if(Model.YearlySummary == null)
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.body2">Click the button if you want to start a new summary.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick= "StartNewYearlySummary">New summary</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    <div class="container mt-4">
        <div class="row mb-2 justify-content-center">
            <div class="col-9">
                <_SummaryNavigation 
                    CurrentMonthlySummary="@Model.CurrentMonthlySummary" 
                    OnNextMonthClick="MoveMonthForward" 
                    OnPreviousMonthClick="MoveMonthBack" />
            </div>
        </div>
        <div class="row mb-5 d-flex justify-content-center align-items-stretch">
            <div class="col-3 d-flex">
                <_BudgetCard MonthlyBudget="@Model.CurrentMonthlySummary.Budget" OnConfirmBudget="ConfirmBudget" />
            </div>
            <div class="col-3 d-flex">
                <_SingleValueCard Title="Expenses" Value="@Model.TotalAmount"></_SingleValueCard>
            </div>
            <div class="col-3 d-flex">
                <_SingleValueCard Title="Saved" Value="@Model.Saved"></_SingleValueCard>
            </div>
        </div>
        <div class="row mb-5 justify-content-center">
            <div class="col-9">
                <div class="card shadow">
                    <div class="card-header">
                        <h2 class="text-center">Expenses</h2>
                    </div>
                    <div class="card-body">
                        <_ExpensesDataGrid Expenses="Model.CurrentMonthlySummary.Expenses" OnExpenseDelete="LoadModel"></_ExpensesDataGrid>
                    </div>
                </div>
                  
            </div>          
        </div>
    </div>  
}

@code {
    private PlannerVM Model = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadModel();
    }

    private async Task LoadModel()
    {
        isLoading = true;
        Model.CurrentAccount = await _accountsService.GetCurrentAccountAsync();
        Model.YearlySummary = await _budgetPlannerService.GetYearlySummaryAsync(Model.CurrentAccount.Id, Model.CurrentYear);
        if(Model.YearlySummary is null)
        {
            isLoading = false;
            return;
        }

        Model.CurrentMonthlySummary = GetCurrentMonthlySummary();

        isLoading = false;
    }

    private MonthlySummaryVM GetCurrentMonthlySummary()
    {
        var currentMonthlySummary = Model.YearlySummary?.MonthlySummaries.FirstOrDefault(q => q.Month == Model.CurrentMonth);
        return currentMonthlySummary ?? new MonthlySummaryVM();
    }

    private async Task StartNewYearlySummary()
    {
        await _budgetPlannerService.StartNewYearlySummary(Model.CurrentAccount.Id, Model.CurrentYear);
        await LoadModel();
    }

    public void MoveMonthForward()
    {
        if (Model.CurrentMonth < 12)
        {
            Model.CurrentMonth++;
            Model.CurrentMonthlySummary = GetCurrentMonthlySummary();
        }
    }

    public void MoveMonthBack()
    {
        if (Model.CurrentMonth > 1)
        {
            Model.CurrentMonth--;
            Model.CurrentMonthlySummary = GetCurrentMonthlySummary();
        }
    }

    private async Task ConfirmBudget(decimal newBudget)
    {
        await LoadModel();
    }
}

