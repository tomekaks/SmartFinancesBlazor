@inject IBudgetPlannerService _budgetPlannerService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudDataGrid T="RegularExpenseVM" Items="RegularExpenses" ReadOnly="false" EditMode="DataGridEditMode.Form"
             Bordered="true" StartedEditingItem="@StartedEditingItem" CommittedItemChanges="CommittedItemChanges">
    <ToolBarContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToPlanner">Back to Planner</MudButton>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Success" EndIcon="@Icons.Material.Filled.AddCircle" OnClick="NavigateToAddRegularExpense">Add</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="q => q.Name"></PropertyColumn>
        <PropertyColumn Property="q => q.Amount"></PropertyColumn>
        <PropertyColumn Property="q => q.ExpenseTypeVM.Name" Title="Type">
            <EditTemplate>
                <MudSelect @bind-Value="@context.Item.ExpenseTypeVM" RequiredError="Please select Expense Type."
                           Placeholder="@context.Item.ExpenseTypeVM.Name">
                    <MudSelectItem Value="@context.Item.ExpenseTypeVM">@context.Item.ExpenseTypeVM.Name</MudSelectItem>
                    @foreach (var expType in ExpenseTypes)
                    {
                        <MudSelectItem Value="expType">@expType.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.Send"
                           Size="Size.Small" OnClick="() => UseRegularExpense(context.Item)">
                    Use
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit"
                           Size="Size.Small" OnClick="@context.Actions.StartEditingItemAsync">
                    Edit
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                           Size="Size.Small" OnClick="() => ConfirmDeleteRegularExpense(context.Item.Id)">
                    Delete
                </MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    [Parameter]
    public TransactionalAccountVM CurrentAccount { get; set; } = new();

    [Parameter]
    public List<RegularExpenseVM> RegularExpenses { get; set; } = new();

    [Parameter]
    public int MonthlySummaryId { get; set; }

    public List<ExpenseTypeVM> ExpenseTypes { get; set; } = new();

    private async Task StartedEditingItem()
    {
        ExpenseTypes = await _budgetPlannerService.GetExpenseTypesAsync();
    }

    private async Task CommittedItemChanges(RegularExpenseVM regularExpenseVM)
    {
        await _budgetPlannerService.EditRegularExpenseAsync(regularExpenseVM);
    }

    private async Task ConfirmDeleteRegularExpense(int id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this expense?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = _dialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteExpense(id);
        }
    }

    private async Task DeleteExpense(int id)
    {
        await _budgetPlannerService.DeleteRegularExpenseAsync(id);
        RegularExpenses = await _budgetPlannerService.GetRegularExpensesAsync(CurrentAccount.Id);
    }

    private async Task UseRegularExpense(RegularExpenseVM regularExpenseVM)
    {
        await _budgetPlannerService.UseRegularExpenseAsync(regularExpenseVM, MonthlySummaryId);
        _snackbar.Add("Added to current expenses.", Severity.Success,
        config => { config.SnackbarVariant = Variant.Filled; config.CloseAfterNavigation = true; });
    }

    private void NavigateToAddRegularExpense()
    {
        _navigationManager.NavigateTo($"/budgetplanner/addregularexpense/{CurrentAccount.Id}");
    }

    private void NavigateToPlanner()
    {
        _navigationManager.NavigateTo("/budgetplanner");
    }
}
