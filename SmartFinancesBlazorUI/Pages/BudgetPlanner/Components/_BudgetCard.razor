@inject IBudgetPlannerService BudgetPlannerService
@inject IDialogService DialogService

<div class="card shadow w-100">
    <div class="card-header">Budget</div>
    <div class="card-body">
        <div>@MonthlyBudget</div>
    </div>
    <div class="card-footer">
        @if (_settingBudget)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small">
                Setting budget<MudProgressCircular Indeterminate="true" Size="Size.Small"></MudProgressCircular>
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small" OnClick="OpenSetGoalDialog">Set budget</MudButton>
        }
    </div>
</div>

@code {
    [Parameter]
    public decimal MonthlyBudget { get; set; }

    [Parameter]
    public EventCallback<decimal> OnConfirmBudget { get; set; }

    private bool _settingBudget = false;

    private async Task OpenSetGoalDialog()
    {
        _settingBudget = true;
        var title = "Set Monthly Budget";

        var parameters = new DialogParameters<_SetValueDialog>
        {
            { x => x.InitialValue, MonthlyBudget }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<_SetValueDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newBudget = (decimal)result.Data;
            await SetBudget(newBudget);
        }
        _settingBudget = false;
    }

    private async Task SetBudget(decimal newBudget)
    {
        await BudgetPlannerService.SetBudgetAsync(newBudget);
        MonthlyBudget = newBudget;

        _settingBudget = false;
        await OnConfirmBudget.InvokeAsync();
    }
}
