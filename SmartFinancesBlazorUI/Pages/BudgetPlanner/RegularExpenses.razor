@page "/budgetplanner/regularexpenses"
@inject IBudgetPlannerService BudgetPlannerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Regular expenses</h3>

<div>
    <button class="btn btn-secondary" @onclick="NavigateToAddRegularExpense">Add new regular expense</button>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Amount</th>
                <th>Type</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var regularExpense in Model)
            {
                <tr>
                    <td>@regularExpense.Name</td>
                    <td>@regularExpense.Amount</td>
                    <td>@regularExpense.ExpenseTypeVM.Name</td>
                    <td>
                        <button @onclick="() => NavigateToEditRegularExpense(regularExpense.Id)" class="btn btn-info">Edit</button>
                    </td>
                    <td>
                        <button @onclick="() => ConfirmDeleteRegularExpense(regularExpense.Id)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<div>
    <button class="btn btn-primary" @onclick="NavigateToPlanner">Back to Planner</button>
</div>

@code 
{
    private List<RegularExpenseVM> Model = new List<RegularExpenseVM>();

    protected override async Task OnInitializedAsync()
    {
        Model = await BudgetPlannerService.GetRegularExpensesAsync();
    }

    private void NavigateToAddRegularExpense()
    {
        NavigationManager.NavigateTo("/budgetplanner/addregularexpense");
    }

    private void NavigateToEditRegularExpense(int id)
    {
        NavigationManager.NavigateTo($"/budgetplanner/editregularexpense/{id}");
    }

    private void NavigateToPlanner()
    {
        NavigationManager.NavigateTo("/budgetplanner");
    }

    private async Task ConfirmDeleteRegularExpense(int id)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");

        if (result)
        {
            await DeleteRegularExpense(id);
            StateHasChanged();
        }
    }

    private async Task DeleteRegularExpense(int id)
    {
        await BudgetPlannerService.DeleteRegularExpenseAsync(id);
        Model = await BudgetPlannerService.GetRegularExpensesAsync();
    }
}
