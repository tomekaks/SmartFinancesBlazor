@page "/budgetplanner"
@inject IBudgetPlannerService BudgetPlannerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Budget planner</PageTitle>

<h1 class="mb-3">Budget Planner</h1>


@if(Model == null)
{
    <p>Loading data...</p>
}
else if(Model.YearlySummary == null)
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.body2">Click the button if you want to start a new summary.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick= "StartNewYearlySummary">New summary</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
   
    <h4>Your monthly budget: @Model.Budget</h4>

    <div>
        <button class="btn btn-dark" @onclick="NavigateToSetBudget">Set budget</button>
    </div>

    <h4>Your monthly expenses: @Model.TotalAmount</h4>

    <div>
        <button class="btn btn-success" @onclick="NavigateToAddExpense">Add expense</button> |
        <button class="btn btn-secondary" @onclick="NavigateToRegularExpenses">Regular expenses</button>
    </div>

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Type</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in Model.CurrentMonthlySummary.Expenses)
                {
                        <tr>
                            <td>@expense.Name</td>
                            <td>@expense.Amount</td>
                            <td>@expense.ExpenseTypeVM.Name</td>
                            <td>
                                <button @onclick="() => NavigateToEditExpense(expense.Id)" class="btn btn-info">Edit</button>
                            </td>
                            <td>
                                <button @onclick="() => ConfirmDeleteExpense(expense.Id)" class="btn btn-danger">Delete</button>
                            </td>
                        </tr>
                }
            </tbody>
        </table>
    </div>

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Housing</th>
                    <th>Utilities</th>
                    <th>Food</th>
                    <th>Clothes</th>
                    <th>Health</th>
                    <th>Entertainment</th>
                    <th>Electronics</th>
                    <th>Household</th>
                    <th>Transportation</th>
                    <th>Personal</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Model.HousingAmount</td>
                    <td>@Model.UtilitiesAmount</td>
                    <td>@Model.FoodAmount</td>
                    <td>@Model.ClothesAmount</td>
                    <td>@Model.HealthAmount</td>
                    <td>@Model.EntertainmentAmount</td>
                    <td>@Model.ElectronicsAmount</td>
                    <td>@Model.HouseholdAmount</td>
                    <td>@Model.TransportationAmount</td>
                    <td>@Model.PersonalAmount</td>
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    private PlannerVM? Model;

    protected override async Task OnInitializedAsync()
    {
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task StartNewYearlySummary()
    {
        await BudgetPlannerService.StartNewYearlySummary();
        StateHasChanged();
    }

    private async Task ConfirmDeleteExpense(int id)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");

        if (result)
        {
            await DeleteExpense(id);
            StateHasChanged();
        }
    }

    private async Task DeleteExpense(int id)
    {
        await BudgetPlannerService.DeleteExpenseAsync(id);
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private void NavigateToSetBudget()
    {
        NavigationManager.NavigateTo("/budgetplanner/setbudget");
    }

    private void NavigateToAddExpense()
    {
        NavigationManager.NavigateTo("/budgetplanner/addexpense");
    }

    private void NavigateToRegularExpenses()
    {
        NavigationManager.NavigateTo("/budgetplanner/regularexpenses");
    }

    private void NavigateToEditExpense(int id)
    {
        NavigationManager.NavigateTo($"/budgetplanner/editexpense/{id}");
    }
}


