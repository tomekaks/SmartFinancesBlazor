@page "/budgetplanner"
@inject IBudgetPlannerService BudgetPlannerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<PageTitle>Budget planner</PageTitle>


@if(Model == null)
{
    <p>Loading data...</p>
}
else if(Model.YearlySummary == null)
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.body2">Click the button if you want to start a new summary.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick= "StartNewYearlySummary">New summary</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    <div class="container mt-4">
        <div class="row mb-2">
            <div class="col-10">
                <div class="d-flex justify-content-center align-items-center text-black p-2">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="PreviousMonth"></MudButton>

                    <MudButton Variant="Variant.Filled" Disabled>
                        Your Budget Planner For: @Model.CurrentMonthlySummary.Month/@Model.CurrentMonthlySummary.Year
                    </MudButton>

                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowForward" OnClick="NextMonth"></MudButton>
                </div>
            </div>
        </div>
        <div class="row mb-5">
            <div class="col-5">
                <MudCard>
                    <MudCardContent>
                        @if(_settingBudget)
                        {
                            <MudTextField Label="Set Budget" @bind-Value="_settingBudgetValue" />
                        }
                        else
                        {
                            <MudText Typo="Typo.h5">Your monthly budget: @Model.CurrentMonthlySummary.Budget</MudText>           
                        }
                    </MudCardContent>
                    <MudCardActions>
                        @if(_settingBudget)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="ConfirmBudget">Confirm budget</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="SetBudget">Set budget</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </div>
                <div class="col-5">
                    <MudCard>
                        <MudCardContent>
                            <MudText Typo="Typo.h5">Your monthly expenses: @Model.TotalAmount</MudText>
                            <MudText Typo="Typo.h5">Saved: @Model.Saved</MudText>
                        </MudCardContent>
                    </MudCard>
                </div>       
        </div>
        <div class="row mb-5">
            <div class="col-10">
                <MudDataGrid T="ExpenseVM" Items="Model.CurrentMonthlySummary.Expenses" ReadOnly="false" EditMode="DataGridEditMode.Form"
                    Bordered="true" StartedEditingItem="@StartedEditingItem" CommittedItemChanges="CommittedItemChanges">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Expenses</MudText>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="NavigateToAddExpense">Add expense</MudButton> |
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="NavigateToRegularExpenses">Regular expenses</MudButton>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="q => q.Name"></PropertyColumn>
                        <PropertyColumn Property="q => q.Amount"></PropertyColumn>
                        <PropertyColumn Property="q => q.ExpenseTypeVM.Name" Title="Type">
                            <EditTemplate>
                                    <MudSelect @bind-Value="@context.Item.ExpenseTypeVM" RequiredError="Please select Expense Type." 
                                        Placeholder="@context.Item.ExpenseTypeVM.Name">
                                    @foreach(var expType in Model.ExpenseTypes)
                                    {
                                        <MudSelectItem Value="expType">@expType.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </EditTemplate>
                        </PropertyColumn>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" OnClick="@context.Actions.StartEditingItemAsync">Edit</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => ConfirmDeleteExpense(context.Item.Id)">Delete</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
                    
            </div>          
        </div>
        <div class="row mb-5">
            <div class="col-10">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Housing</th>
                            <th>Utilities</th>
                            <th>Food</th>
                            <th>Clothes</th>
                            <th>Health</th>
                            <th>Entertainment</th>
                            <th>Electronics</th>
                            <th>Household</th>
                            <th>Transportation</th>
                            <th>Personal</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@Model.HousingAmount</td>
                            <td>@Model.UtilitiesAmount</td>
                            <td>@Model.FoodAmount</td>
                            <td>@Model.ClothesAmount</td>
                            <td>@Model.HealthAmount</td>
                            <td>@Model.EntertainmentAmount</td>
                            <td>@Model.ElectronicsAmount</td>
                            <td>@Model.HouseholdAmount</td>
                            <td>@Model.TransportationAmount</td>
                            <td>@Model.PersonalAmount</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>            
    </div>  
}

@code {
    private PlannerVM? Model;
    private bool _settingBudget = false;
    private decimal _settingBudgetValue;

    protected override async Task OnInitializedAsync()
    {
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task StartNewYearlySummary()
    {
        await BudgetPlannerService.StartNewYearlySummary();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task StartedEditingItem()
    {
        Model.ExpenseTypes = await BudgetPlannerService.GetExpenseTypesAsync();
    }

    private async Task CommittedItemChanges(ExpenseVM expenseVM)
    {
        await BudgetPlannerService.EditExpenseAsync(expenseVM);
    }

    private async Task ConfirmDeleteExpense(int id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this expense?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteExpense(id);
        }
    }

    private async Task DeleteExpense(int id)
    {
        await BudgetPlannerService.DeleteExpenseAsync(id);
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task PreviousMonth()
    {
        BudgetPlannerService.MoveMonthBack();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private async Task NextMonth()
    {
        BudgetPlannerService.MoveMonthForward();
        Model = await BudgetPlannerService.GetPlannerVMAsync();
    }

    private void SetBudget()
    {
        _settingBudgetValue = Model.CurrentMonthlySummary.Budget;
        _settingBudget = true;
    }

    private async Task ConfirmBudget()
    {
        await BudgetPlannerService.SetBudgetAsync(_settingBudgetValue);
        Model = await BudgetPlannerService.GetPlannerVMAsync();
        _settingBudget = false;
    }

    private void NavigateToAddExpense()
    {
        NavigationManager.NavigateTo("/budgetplanner/addexpense");
    }

    private void NavigateToRegularExpenses()
    {
        NavigationManager.NavigateTo("/budgetplanner/regularexpenses");
    }

    private void NavigateToEditExpense(int id)
    {
        NavigationManager.NavigateTo($"/budgetplanner/editexpense/{id}");
    }

    // OnClick="() => ConfirmDeleteExpense(context.Item.Id)"
    // private async Task ConfirmDeleteExpense(int id)
    // {
    //     var result = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");

    //     if (result)
    //     {
    //         await DeleteExpense(id);
    //         StateHasChanged();
    //     }
    // }
}

