@page "/contacts/contacts"
@inject IContactsService ContactsService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Contacts</h1>

<div>
    <button class="btn btn-secondary" @onclick="NavigateToAddContact">Add new</button>
</div>

<div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Account number</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in contacts)
            {
                <tr>
                    <td>@contact.Name</td>
                    <td>@contact.AccountNumber</td>
                    <td>
                        <button @onclick="() => ConfirmUseContact(contact)" class="btn btn-success">Use</button>
                    </td>
                    <td>
                        <button @onclick="() => NavigateToEditContact(contact)" class="btn btn-info">Edit</button>
                    </td>
                    <td>
                        <button @onclick="() => ConfirmDeleteContact(contact.Id)" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


<div>
    <button class="btn btn-primary" @onclick="NavigateToNewTransfer">Back to Transfers</button>
</div>

@code {
    private string userId;
    private List<ContactVM> contacts = new List<ContactVM>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // contacts = ContactsService.GetContacts(userId);
        contacts = ContactsService.GetContactsTemp();
    }

    private async Task ConfirmUseContact(ContactVM contactVM)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Do you want to use this contact?");

        if (result)
        {
            UseContact(contactVM);
        }
    }

    private void UseContact(ContactVM contactVM)
    {
        NavigateToNewTransferWithParams(contactVM);
    }

    private async Task ConfirmDeleteContact(int id)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");

        if (result)
        {
            DeleteContact(id);
        }
    }

    private void DeleteContact(int id)
    {

    }

    private void NavigateToEditContact(ContactVM contactVM)
    {
        NavigationManager.NavigateTo($"/contacts/editcontact/{contactVM.Name}/{contactVM.AccountNumber}");
    }

    private void NavigateToAddContact()
    {
        NavigationManager.NavigateTo("/contacts/addcontact");
    }

    private void NavigateToNewTransfer()
    {
        NavigationManager.NavigateTo("/transfers/newtransfer");
    }

    private void NavigateToNewTransferWithParams(ContactVM contactVM)
    {
        NavigationManager.NavigateTo($"/transfers/newtransfer/{contactVM.Name}/{contactVM.AccountNumber}");
    }
}
