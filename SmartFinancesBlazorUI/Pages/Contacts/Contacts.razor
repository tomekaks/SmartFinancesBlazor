@page "/contacts"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject IContactsService _contactsService
@inject NavigationManager _navigationManager
@inject IDialogService _dialogService

<PageTitle>Contacts</PageTitle>

@if(isLoading)
{
    <_LoadingData Message="Loading contacts..."></_LoadingData>
}
else
{
    <div class="container mt-5">
        <div class="row mb-2 justify-content-center">
            <div class="col-8">
                <div class="card shadow">
                    <div class="card-header d-flex justify-content-center">
                        <h2>Contacts</h2>
                    </div>
                    <div class="card-body">
                        <MudDataGrid T="ContactVM" Items="Model" ReadOnly="false" Bordered="true" Dense="true"
                                     EditMode="DataGridEditMode.Form" CommittedItemChanges="CommittedItemChanges">
                            <ToolBarContent>
                                <MudSpacer />
                                <MudButton 
                                    Variant="Variant.Filled" 
                                    Color="Color.Success" 
                                    OnClick="NavigateToAddContact"                                          
                                    EndIcon="@Icons.Material.Filled.AddCircle">
                                    Add contact
                                </MudButton>
                            </ToolBarContent>
                            <Columns>
                                <PropertyColumn Property="q => q.Name"></PropertyColumn>
                                <PropertyColumn Property="q => q.AccountNumber" Title="Account Number"></PropertyColumn>
                                <TemplateColumn>
                                    <CellTemplate>
                                        <MudButton 
                                            Variant="Variant.Filled" 
                                            Color="Color.Info"
                                            Size="Size.Small"
                                            StartIcon="@Icons.Material.Filled.Edit"
                                            OnClick="@context.Actions.StartEditingItemAsync">
                                            Edit
                                        </MudButton>
                                        <MudButton 
                                            Variant="Variant.Filled" 
                                            Color="Color.Error"
                                            Size="Size.Small"
                                            StartIcon="@Icons.Material.Filled.Delete" 
                                            OnClick="() => ConfirmDeleteContact(context.Item.Id)">
                                            Delete
                                        </MudButton>
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </div>
                </div>

            </div>
        </div>
    </div>

}


@code {
    private List<ContactVM> Model = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Model = await _contactsService.GetContactsAsync();
        isLoading = false;
    }

    private async Task CommittedItemChanges(ContactVM contact)
    {
        await _contactsService.UpdateContactAsync(contact);
    }

    private async Task ConfirmDeleteContact(int id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this contact?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = _dialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteContact(id);
        }
    }

    private async Task DeleteContact(int id)
    {
        await _contactsService.DeleteContactAsync(id);
        Model = await _contactsService.GetContactsAsync();
    }

    private void NavigateToEditContact(int id)
    {
        _navigationManager.NavigateTo($"/contacts/editcontact/{id}");
    }

    private void NavigateToAddContact()
    {
        _navigationManager.NavigateTo("/contacts/addcontact");
    }
}

