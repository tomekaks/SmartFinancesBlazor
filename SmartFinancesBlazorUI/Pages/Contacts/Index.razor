@page "/contacts"
@inject IContactsService ContactsService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<PageTitle>Contacts</PageTitle>

@if(Model.Contacts is null)
{
    <p>Loading data...</p>
}
else
{
    <div class="container mt-2">
        <div class="row mb-2">
            <div class="col-10">
                <MudDataGrid T="ContactVM" Items="Model.Contacts" ReadOnly="false" EditMode="DataGridEditMode.Form"
                             Bordered="true" CommittedItemChanges="CommittedItemChanges">
                    <ToolBarContent>
                        <MudText Typo="Typo.h4">Contacts</MudText>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="NavigateToAddContact">Add contact</MudButton>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="q => q.Name"></PropertyColumn>
                        <PropertyColumn Property="q => q.AccountNumber" Title="Account Number"></PropertyColumn>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" OnClick="@context.Actions.StartEditingItemAsync">Edit</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => ConfirmDeleteContact(context.Item.Id)">Delete</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </div>
        </div>
    </div>

}


@code {
    private ContactsVM Model;

    protected override async Task OnInitializedAsync()
    {
        Model = new ContactsVM();
        Model.Contacts = await ContactsService.GetContactsAsync();
    }

    private async Task CommittedItemChanges(ContactVM contact)
    {
        await ContactsService.UpdateContactAsync(contact);
    }

    private async Task ConfirmDeleteContact(int id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this contact?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteContact(id);
        }
    }

    private async Task DeleteContact(int id)
    {
        await ContactsService.DeleteContactAsync(id);
        Model.Contacts = await ContactsService.GetContactsAsync();
    }

    private void NavigateToEditContact(ContactVM contactVM)
    {
        NavigationManager.NavigateTo($"/contacts/editcontact/{contactVM.Name}/{contactVM.AccountNumber}");
    }
    private void NavigateToEditContact(int id)
    {
        NavigationManager.NavigateTo($"/contacts/editcontact/{id}");
    }

    private void NavigateToAddContact()
    {
        NavigationManager.NavigateTo("/contacts/addcontact");
    }



    // private async Task ConfirmDeleteContact(int id)
    // {
    //     var result = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");

    //     if (result)
    //     {
    //         await DeleteContact(id);
    //         StateHasChanged();
    //     }
    // }
}
