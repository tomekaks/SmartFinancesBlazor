@page "/dashboard"
@attribute [Authorize(Roles = $"{Constants.USER} , {Constants.TESTUSER}")]
@inject NavigationManager NavigationManager
@inject IDashboardService DashboardService
@inject IDialogService DialogService


<PageTitle>Dashboard</PageTitle>

@if (Model.Accounts is null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="text-center mt-4">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Class="my-4" />
        <MudText Typo="Typo.h6">Loading data...</MudText>
    </MudContainer>
}
else
{
    <div class="container mt-4">
        @foreach(var account in Model.Accounts)
        {
            <div class="row mb-3">
                <div class="col-8">
                    <_TransactionalAccountCard Account="account" 
                        CurrentAccount="Model.CurrentAccount" 
                        OnAddFunds="AddFunds" 
                        OnSetCurrentAccount="ConfirmSetCurrentAccount"/>
                </div>
            </div>
        }
        @if(Model.SavingsAccount != null)
        {
            <div class="row mb-3">
                <div class="col-8">
                    <_SavingsAccountCard SavingsAccount="Model.SavingsAccount" OnConfirmGoal="ConfirmGoal"/>
                </div>
            </div>     
        }

        @if(Model.Accounts.Count() < 3 || Model.SavingsAccount == null)
        {
            <div class="row mb-3">
                <div class="col-8">
                    <_RequestAccountCard />
                </div>
            </div>
        }
        
    </div>
}

@code {
    public DashboardVM Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadModel();
    }

    private async Task LoadModel()
    {
        Model.Accounts = await DashboardService.GetTransactionalAccountsAsync();
        Model.CurrentAccount = await DashboardService.GetCurrentAccountAsync();
        Model.SavingsAccount = await DashboardService.GetSavingsAccountAsync();
    }

    private async Task ConfirmSetCurrentAccount(string accountNumber)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Are you sure you want to change accounts?");
        parameters.Add(x => x.ButtonText, "Yes");
        parameters.Add(x => x.Color, Color.Primary);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<Dialog>("Change account", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await SetAsCurrent(accountNumber);
        }
    }

    private async Task SetAsCurrent(string accountNumber)
    {
        await DashboardService.ChangeAccountAsync(accountNumber);
        await LoadModel();
    }

    private async Task ConfirmGoal()
    {
        await LoadModel();
    }

    private async Task AddFunds()
    {
        await LoadModel();
    }




}
