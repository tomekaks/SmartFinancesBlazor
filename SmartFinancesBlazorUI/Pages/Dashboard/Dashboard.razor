@page "/dashboard"
@inject NavigationManager NavigationManager
@inject IDashboardService DashboardService
@inject IDialogService DialogService

<PageTitle>Dashboard</PageTitle>

@if(Model.Accounts is null)
{
    <p>Loading data...</p>
}
else
{
    <div class="container mt-4">
        @foreach(var account in Model.Accounts)
        {
            <div class="row mb-3">
                <div class="col-8">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@account.Type</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                @if (account.Number == Model.CurrentAccount.Number)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddFunds">Add funds</MudButton>
                                }
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>Number: @account.Number</MudText>
                            <MudText>Balance: @account.Balance</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            @if (account.Number == Model.CurrentAccount.Number)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">Current Account</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ConfirmSetCurrentAccount(account.Number)">Set as current</MudButton>
                            }
                        </MudCardActions>
                    </MudCard>                  
                </div>
            </div>
        }
        @if(Model.SavingsAccount != null)
        {
            <div class="row mb-3">
                <div class="col-8">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Savings</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Surface">Set goal</MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>Savings Goal:@Model.SavingsAccount.Goal </MudText>
                            <MudText>Balance: @Model.SavingsAccount.Balance</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToDeposit">Deposit</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="NavigateToWithdraw">Withdraw</MudButton>
                        </MudCardActions>
                    </MudCard>
                </div>
            </div>     
        }

        @if(Model.Accounts.Count() < 4)
        {
            <div class="row mb-3">
                <div class="col-8">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Request a new account</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="NavigateToRequestAccount"></MudIconButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                    </MudCard>
                </div>
            </div>
        }
        
    </div>
}

@code {
    public DashboardVM Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Model = await DashboardService.LoadDashboardVM();   
    }

    private async Task ConfirmSetCurrentAccount(string accountNumber)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Are you sure you want to change accounts?");
        parameters.Add(x => x.ButtonText, "Yes");
        parameters.Add(x => x.Color, Color.Primary);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<Dialog>("Change account", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await SetAsCurrent(accountNumber);
        }
    }

    private async Task SetAsCurrent(string accountNumber)
    {
        await DashboardService.ChangeAccountAsync(accountNumber);
        Model = await DashboardService.LoadDashboardVM();
    }

    private void AddFunds()
    {
        NavigationManager.NavigateTo("/dashboard/addfunds");
    }

    private void NavigateToRequestAccount()
    {
        NavigationManager.NavigateTo("/dashboard/requestnewaccount");
    }

    private void NavigateToWithdraw()
    {
        NavigationManager.NavigateTo("/dashboard/withdraw");
    }

    private void NavigateToDeposit()
    {
        NavigationManager.NavigateTo("/dashboard/deposit");
    }
}
