@inject NavigationManager NavManager
@inject IDashboardService DashboardService

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudButton Variant="Variant.Text" OnClick="NavigateToTransfers" StartIcon="@Icons.Material.Filled.AccountBalanceWallet">
                <MudText Typo="Typo.h5">@Account.Type</MudText>
            </MudButton>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (Account.Number == CurrentAccount.Number)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" 
                    OnClick="OnAddFunds.InvokeAsync" EndIcon="@Icons.Material.Filled.AddCircle">
                    Add funds
                </MudButton>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudDivider />
    <MudCardContent>
        <MudText>Number: @Account.Number</MudText>
        <MudText>Balance: @Account.Balance</MudText>
    </MudCardContent>
    <MudCardActions>
        @if (Account.Number == CurrentAccount.Number)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">Current Account</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OnSetCurrentAccount.InvokeAsync(Account.Number)">Set as current</MudButton>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public TransactionalAccountVM Account { get; set; }

    [Parameter]
    public TransactionalAccountVM CurrentAccount { get; set; }

    [Parameter]
    public EventCallback<string> OnAddFunds { get; set; }

    [Parameter]
    public EventCallback<string> OnSetCurrentAccount { get; set; }

    private async void NavigateToTransfers()
    {
        await DashboardService.ChangeAccountAsync(Account.Number);
        NavManager.NavigateTo("/transfers");
    }
}
