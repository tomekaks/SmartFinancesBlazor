@inject NavigationManager _navManager
@inject IDashboardService _dashboardService
@inject IDialogService _dialogService

<div class="card shadow w-100">
    <div class="card-header d-flex justify-content-between align-items-center">
        <MudButton Variant="Variant.Text" OnClick="NavigateToTransfers" StartIcon="@Icons.Material.Filled.AccountBalanceWallet">
            <MudText Typo="Typo.h5">@Account.Type</MudText>
        </MudButton>
        @if (_addingFunds)
        {
            <MudButton Variant ="Variant.Filled" Color="Color.Success"  Disabled ="true" >
                 Adding Funds
                <MudProgressCircular Indeterminate ="true" Size="Size.Small" Class = "ms-2" />
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success"
                OnClick="OpenAddFundsDialog" EndIcon="@Icons.Material.Filled.AddCircle" >
                Add funds
            </MudButton>
        }
    </div>
    <div class="card-body">
        <MudText>Number: @Account.Number</MudText>
        <MudText>Balance: @Account.Balance</MudText>
    </div>
    <div class="card-footer">
        @if (Account.Number == CurrentAccount.Number)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="true">Current Account</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OnSetCurrentAccount.InvokeAsync(Account.Number)">
                Set as current
            </MudButton>
        }
    </div>
</div>

@code {
    [Parameter]
    public TransactionalAccountVM Account { get; set; }

    [Parameter]
    public TransactionalAccountVM CurrentAccount { get; set; }

    [Parameter]
    public EventCallback<string> OnAddFunds { get; set; }

    [Parameter]
    public EventCallback<string> OnSetCurrentAccount { get; set; }

    private bool _addingFunds = false;

    private async Task OpenAddFundsDialog()
    {
        _addingFunds = true;
        var title = "Add funds";

        var parameters = new DialogParameters<_SetValueDialog>
        {
            { x => x.InitialValue, 0 }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = await _dialogService.ShowAsync<_SetValueDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var funds = (decimal)result.Data;
            await AddFunds(funds);
        }
        _addingFunds = false;
    }

    private async Task AddFunds(decimal funds)
    {
        await _dashboardService.AddFundsAsync(Account.Id, funds);
        CurrentAccount.Balance = funds;

        _addingFunds = false;
        await OnAddFunds.InvokeAsync();
    }

    private async void NavigateToTransfers()
    {
        await _dashboardService.ChangeAccountAsync(Account.Number);
        _navManager.NavigateTo("/transfers");
    }
}
