@inject NavigationManager NavigationManager
@inject IDashboardService DashboardService
@inject IDialogService DialogService

<div class="card shadow w-100">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <MudButton Variant="Variant.Text" OnClick="NavigateToTransfers" StartIcon="@Icons.Material.Filled.Savings">
                <MudText Typo="Typo.h5">Savings</MudText>
            </MudButton>
        </div>
        <div>
            @if (_settingGoal)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="true">
                    Setting Goal
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="ms-2" />
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenSetGoalDialog">
                    Set goal
                </MudButton>
            }
        </div>
    </div>
    <div class="card-body">
        <MudText>Savings goal: @SavingsAccount.Goal</MudText>
        <MudText>Balance: @SavingsAccount.Balance</MudText>
    </div>
</div>

@code {
    [Parameter]
    public SavingsAccountVM SavingsAccount { get; set; }

    [Parameter]
    public EventCallback OnConfirmGoal { get; set; }

    private bool _settingGoal = false;

    private async Task OpenSetGoalDialog()
    {
        _settingGoal = true;
        var title = "Set Savings Goal";

        var parameters = new DialogParameters<_SetValueDialog>
        {
            { x => x.InitialValue, SavingsAccount.Goal }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<_SetValueDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newGoal = (decimal)result.Data;
            await SetSavingsGoal(newGoal);
        }
        _settingGoal = false;
    }

    private async Task SetSavingsGoal(decimal newGoal)
    {
        await DashboardService.SetSavingsGoalAsync(newGoal);
        SavingsAccount.Goal = newGoal;

        _settingGoal = false;
        await OnConfirmGoal.InvokeAsync();
    }

    private void NavigateToTransfers()
    {
        NavigationManager.NavigateTo("/savingstransfers");
    }
}
