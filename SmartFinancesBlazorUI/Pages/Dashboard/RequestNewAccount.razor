@page "/dashboard/requestnewaccount"
@inject NavigationManager NavigationManager
@inject IDashboardService DashboardService

<PageTitle>Request a New Account</PageTitle>

@if(Model.Accounts is null)
{
    <p>Loading....</p>
}
else
{
    <MudText Typo="Typo.h4" Class="mb-4">Request a new account</MudText>
    <MudGrid Class="mb-4">
        @foreach (var type in Model.AvailableAccountTypes)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="ml-2">@type.ToString()</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @* <MudText>@GetDescriptionForAccountType(type)</MudText> *@
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => RequestAccount((int)type))">Request</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
        }
    </MudGrid>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToDashboard">Back</MudButton>
    </MudItem>
}




@code {
    private NewAccountVM Model = new();

    protected override async Task OnInitializedAsync()
    {
        Model.Accounts = await DashboardService.GetAllAccountsAsync();
        Model.AvailableAccountTypes = GetAvailableAccountTypes();
    }

    private async Task RequestAccount(int type)
    {
        var response = await DashboardService.RequestNewAccountAsync(type);
        if (response)
        {
            NavigateToDashboard();
        }
    }

    private List<AccountType> GetAvailableAccountTypes()
    {
        var availableAccountTypes = new List<AccountType>();

        var possesedAccountTypes = Model.Accounts.Select(q => q.Type);

        foreach (AccountType type in Enum.GetValues(typeof(AccountType)))
        {
            if(!possesedAccountTypes.Contains(type))
            {
                availableAccountTypes.Add(type);
            }
        }
        return availableAccountTypes;
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

}