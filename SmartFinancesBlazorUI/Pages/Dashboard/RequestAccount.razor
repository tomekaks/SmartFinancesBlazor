@page "/dashboard/requestaccount"
@inject NavigationManager NavigationManager
@inject IDashboardService DashboardService

<PageTitle>Request a New Account</PageTitle>

@if(Model.Accounts is null)
{
    <p>Loading....</p>
}
else
{
    <MudText Typo="Typo.h4" Class="mb-4">Request a new account</MudText>
    <MudGrid Class="mb-4">
        @foreach (var type in Model.AvailableAccountTypes)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="ml-2">@type.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                    </MudCardContent>
                    <MudCardActions>
                        @if(CheckIfPending(type.Name))
                        {

                            <MudButton Variant="Variant.Filled" Color="Color.Warning" Disabled="true" >Pending</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => RequestNewAccount(type))">Request</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToDashboard">Back</MudButton>
    </MudItem>
}




@code {
    private RequestAccountVM Model = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadModel();
    }

    private async Task LoadModel()
    {
        Model.Accounts = await DashboardService.GetTransactionalAccountsAsync();
        Model.SavingsAccount = await DashboardService.GetSavingsAccountAsync();
        Model.PendingAccountTypes = await DashboardService.GetUsersPendingAccountTypesAsync();
        Model.AccountTypes = await DashboardService.GetAccountTypesAsync();
        Model.AvailableAccountTypes = GetAvailableAccountTypes();
    }

    private async Task RequestNewAccount(AccountTypeVM accountType)
    {
        await DashboardService.RequestNewAccountAsync(accountType);
        NavigateToDashboard();
    }

    private List<AccountTypeVM> GetAvailableAccountTypes()
    {
        var possesedAccountTypes = Model.Accounts.Select(q => q.AccountTypeVM.Name).ToList();

        if(Model.SavingsAccount != null)
        {
            possesedAccountTypes.Add(Constants.ACCOUNTTYPE_SAVINGS);
        }

        var availableAccountTypes = new List<AccountTypeVM>();

        foreach (var type in Model.AccountTypes)
        {
            if (!possesedAccountTypes.Contains(type.Name))
            {
                availableAccountTypes.Add(type);
            }
        }

        return availableAccountTypes;
    }

    // private List<string> GetAvailableAccountTypes()
    // {
    //     var accountTypesNames = Model.AccountTypes.Select(q => q.Name);

    //     var possesedAccountTypes = Model.Accounts.Select(q => q.Type);

    //     var availableAccountTypes = new List<string>();

    //     foreach (var type in accountTypesNames)
    //     {
    //         if(!possesedAccountTypes.Contains(type))
    //         {
    //             availableAccountTypes.Add(type);
    //         }
    //     }

    //     return availableAccountTypes;
    // }

    private bool CheckIfPending(string accountType)
    {
        if(Model.PendingAccountTypes.Contains(accountType))
        {
            return true;
        }
        return false;
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

}