@page "/dashboard/requestaccount"
@inject NavigationManager NavigationManager
@inject IDashboardService DashboardService

<PageTitle>Request a New Account</PageTitle>

@if(IsLoading)
{
    <div class="text-center mt-5">
        <p>Loading...</p>
        <div class="spinner-border text-primary" role="status">
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <h2 class="mb-4 text-center">Request a New Account</h2>

        @foreach (var type in Model.AvailableAccountTypes)
        {
            <div class="row justify-content-center">
                <div class="col-8">
                    <div class="card mb-4 shadow-sm">
                        <div class="card-header">
                            <h5 class="my-0 text-center">@type.Name</h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">@type.Description</p>
                            @if (CheckIfPending(type.Name))
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" Disabled="true" Class="btn btn-warning" Style="width: 100%;">Pending</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => RequestNewAccount(type))" Class="btn btn-success" Style="width: 100%;">Request</MudButton>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="text-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToDashboard" Class="btn btn-primary">Back</MudButton>
        </div>
    </div>
}

@code {
    private RequestAccountVM Model = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadModel();
        IsLoading = false;
    }

    private async Task LoadModel()
    {
        Model.Accounts = await DashboardService.GetTransactionalAccountsAsync();
        Model.SavingsAccount = await DashboardService.GetSavingsAccountAsync();
        Model.PendingAccountTypes = await DashboardService.GetUsersPendingAccountTypesAsync();
        Model.AccountTypes = await DashboardService.GetAccountTypesAsync();
        Model.AvailableAccountTypes = GetAvailableAccountTypes();
    }

    private async Task RequestNewAccount(AccountTypeVM accountType)
    {
        await DashboardService.RequestNewAccountAsync(accountType);
        NavigateToDashboard();
    }

    private List<AccountTypeVM> GetAvailableAccountTypes()
    {
        var possessedAccountTypes = Model.Accounts.Select(q => q.AccountTypeVM.Name).ToList();

        if(Model.SavingsAccount != null)
        {
            possessedAccountTypes.Add(Constants.ACCOUNTTYPE_SAVINGS);
        }

        var availableAccountTypes = Model.AccountTypes
            .Where(type => !possessedAccountTypes.Contains(type.Name))
            .ToList();

        return availableAccountTypes;
    }

    private bool CheckIfPending(string accountType)
    {
        return Model.PendingAccountTypes.Contains(accountType);
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }

}